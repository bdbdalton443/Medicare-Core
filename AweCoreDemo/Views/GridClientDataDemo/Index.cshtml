@using AweCoreDemo.Models
@{
    ViewBag.Title = "Grid Client Data Loading";
}

<h2>Grid Client Data Demo</h2>
@*begin1*@
<div class="bar">
    @Html.Awe().TextBox("txtsearch").Placeholder("search ...").CssClass("searchtxt")
    <span class="hint">&nbsp; you can search multiple columns at the same time (try 'pizza tavern')</span>
</div>

@(Html.Awe().Grid("GridClientData")
      .DataFunc("getGridData")
      .Height(350)
      .Mod(o => o.PageInfo().PageSize().ColumnsSelector())
      .Persistence(Persistence.View)
      .Resizable()
      .Reorderable()
      .Parent("txtsearch", "search", false)
      .Columns(
          new Column { Bind = "Id", Width = 75, Groupable = false, Resizable = false },
          new Column { Bind = "Person" },
          new Column { Bind = "Food" },
          new Column { Bind = "Location" },
          new Column { Bind = "Date", Width = 120 },
          new Column { Bind = "CountryName", Header = "Country" },
          new Column { Bind = "ChefName", Header = "Chef" }))
<script>
    // client data source
    var lunches = @Html.Raw(DemoUtils.Encode(Db.Lunches.Take(300).Select(o => new
             {
                 o.Id,
                 o.Person,
                 o.Food,
                 o.Location,
                 o.Price,
                 CountryName = o.Country.Name,
                 ChefName = o.Chef.FirstName + " " + o.Chef.LastName,
                 o.Date,
                 DateStr = o.Date.ToShortDateString()
             })));

    function getGridData(sgp) {
        var where = aweq.where, contains = aweq.contains, loop = awef.loop;
        var gp = utils.getGridParams(sgp);
            var list = lunches;

            // eval search
            if (gp.search) {
                var words = gp.search.toLowerCase().split(" ");

                list = where(list, function (o) {
                    var matches = 0;
                    loop(words, function (w) {
                        if (contains(o.Food, w) || contains(o.Person, w) || contains(o.Location, w) || contains(o.CountryName, w)
                            || contains(o.DateStr, w)
                            || contains(o.ChefName, w)) matches++;
                    });

                    return matches === words.length;
                });
            }

        function map(o) { return { Id: o.Id, Person: o.Person, Food: o.Food, Location: o.Location,
            Date: o.DateStr, CountryName: o.CountryName, ChefName: o.ChefName }; };


        return utils.gridModelBuilder(
            {
                key:"Id",
                gp: gp,
                items: list,
                map:map,
                // replace default group header value for Date
                getHeaderVal:{ Date: function(o){ return o.DateStr; } }
            });
    }

    $(function() {
        $('#txtsearch').keyup(function() {
            $('#GridClientData').data('api').load();
        });
    });
</script>
@*end1*@
<br />
<div class="tabs">
    <div class="expl" data-caption="description">
        Instead of setting <code>.Url(url)</code> to get data, the <code>.DataFunc(jsfunc)</code> extension is used.
        The js func can return the grid model or a promise,
        for example the function could do an ajax request and return the jqXHR object returned by <code>$.get</code>,
        so when the ajax request is complete the ajax success function can return the grid model (used in the Hybrid demo below).
    </div>
    <div data-caption="view">@Html.Source("GridClientDataDemo/Index.cshtml", 1)</div>
</div>
<br />
<br />

@*begin2*@
<h2>Tree Grid Client Data Demo</h2>
<div class="bar">
    @Html.Awe().TextBox("txtsearch2").Placeholder("search ...").CssClass("searchtxt")
</div>
@(Html.Awe().Grid("TreeGrid1")
            .DataFunc("treeGridData")
            .Parent("txtsearch2", "search", false)
            .Columns(
                new Column { Bind = "Name" },
                new Column { Bind = "Id", Width = 100 })
            .Persistence(Persistence.View)
            .Groupable(false)
            .PageSize(3)
            .Height(400))
<script>
    var treeNodes = @Html.Raw(DemoUtils.Encode(Db.TreeNodes.Select(o => new { o.Id, o.Name, ParentId = o.Parent != null ? o.Parent.Id : 0 })));

    function treeGridData(sgp) {
        var gp = utils.getGridParams(sgp);

        var words = gp.search.split(" ");

        var regs = $.map(words, function(w) {
            return new RegExp(w, "i");
        });

        var regsl = regs.length;

        var result = $.grep(treeNodes, function(o) {
            var matches = 0;
            $.each(regs, function(_, reg) {
                reg.test(o.Name) && matches ++;
            });

            return regsl == matches;
        });

        var searchResult = result.slice(0);

        awef.loop(searchResult, function (o) {
            addParentsTo(result, o, treeNodes);
        });

        var rootNodes = $.grep(result, function (o) { return !o.ParentId; });

        var getChildren = function (node, nodeLevel) {
            return $.grep(result, function (o) { return o.ParentId == node.Id; });
        };

        return utils.gridModelBuilder(
            {
                gp: gp,
                items: rootNodes,
                key: "Id",
                getChildren: getChildren
            });
    }

    function addParentsTo(result, node, all) {
        if (node.ParentId) {
            var isFound;
            awef.loop(result, function (o) {
                if (o.Id == node.ParentId) {
                    isFound = true;
                    return false;
                }
            });

            if (!isFound) {
                var parent = $.grep(all, function(o) { return o.Id == node.ParentId; })[0];
                result.push(parent);
                addParentsTo(result, parent, all);
            }
        }
    }

    $(function() {
        $('#txtsearch2').keyup(function() {
            $('#TreeGrid1').data('api').load();
        });
    });
</script>
@*end2*@
<div class="tabs code">
    <div data-caption="view">@Html.Source("GridClientDataDemo/Index.cshtml", 2)</div>
</div>
<br />
<br />
<h2>Simpler grid, no search</h2>
@*begin3*@
@(Html.Awe().Grid("GridSimplerClientData")
      .DataFunc("getSimpleGridData")
      .Height(350)
      .Mod(o => o.PageInfo().PageSize().ColumnsSelector())
      .Persistence(Persistence.View)
      .Columns(
          new Column { Bind = "Id", Width = 75, Groupable = false, Resizable = false },
          new Column { Bind = "Person" },
          new Column { Bind = "Food" },
          new Column { Bind = "Location" },
          new Column { Bind = "Date", Width = 120 },
          new Column { Bind = "CountryName", Header = "Country" },
          new Column { Bind = "ChefName", Header = "Chef" }))
<script>
    function getSimpleGridData(sgp) {
        var gp = utils.getGridParams(sgp);

        function map(o) {
            return {
                Id: o.Id, Person: o.Person, Food: o.Food, Location: o.Location,
                Date: o.DateStr, CountryName: o.CountryName, ChefName: o.ChefName
            };
        };

        return utils.gridModelBuilder(
            {
                gp: gp,
                items: lunches,
                key: "Id",
                map: map,

                // replace default group header value for date
                getHeaderVal: { Date: function (o) { return o.DateStr; } }
            });
    }
</script>
@*end3*@
<div class="tabs code">
    <div data-caption="view">@Html.Source("GridClientDataDemo/Index.cshtml", 3)</div>
</div>

<h2>Hybrid</h2>
<div class="expl">
    Using ajax in the client func on the first call only to load the items
</div>
<br />
@*begin4*@
@(Html.Awe().Grid("GridHybrid")
      .DataFunc("getHybrid")
      .Height(350)
      .Mod(o => o.PageInfo().PageSize().ColumnsSelector())
      .Persistence(Persistence.View)
      .Resizable()
      .Columns(
          new Column { Bind = "Id", Width = 75, Groupable = false, Resizable = false },
          new Column { Bind = "Person" },
          new Column { Bind = "Food" },
          new Column { Bind = "Location" },
          new Column { Bind = "Date", Width = 120 },
          new Column { Bind = "CountryName", Header = "Country" },
          new Column { Bind = "ChefName", Header = "Chef" }))
<script>
    var loadedItems;
    function getHybrid(sgp) {
        var gp = utils.getGridParams(sgp);
        function maph(o) { return { Id: o.Id, Person: o.Person, Food: o.Food, Location: o.Location,
            Date: o.DateStr, CountryName: o.CountryName, ChefName: o.ChefName }; };

        var opt = {
            gp: gp,
            key: "Id",
            map: maph,

            // replace default group header value for date
            getHeaderVal:{ Date: function(o){ return o.DateStr; } }
        };

        if (loadedItems) {
            opt.items = loadedItems;
            return utils.gridModelBuilder(opt);
        }

        return $.get('@Url.Action("GetLunches", "Data")').then(function(items) {
            loadedItems = items;
            opt.items = loadedItems;
            return utils.gridModelBuilder(opt);
        });
    }
</script>
@*end4*@

<div class="tabs code">
    <div data-caption="view">@Html.Source("GridClientDataDemo/Index.cshtml", 4)</div>
</div>

<br />
<br />
<h2>Header and Footer Summary</h2>

@*begin5*@
@(Html.Awe().Grid("GridClientDataSum")
      .DataFunc("getGridDataSum")
      .Height(350)
      .Mod(o => o.PageInfo().PageSize().ColumnsSelector())
      .Persistence(Persistence.View)
      .Columns(
          new Column { Bind = "Id", Width = 75, Groupable = false, Resizable = false },
          new Column { Bind = "Person", Group = true },
          new Column { Bind = "Food" },
          new Column { Bind = "Location" },
          new Column { Bind = "Price", Width = 120 },
          new Column { Bind = "CountryName", Header = "Country" },
          new Column { Bind = "ChefName", Header = "Chef" }))
<script>
    function getGridDataSum(sgp) {
        var gp = utils.getGridParams(sgp);

        function makeFooter(info) {
            var total = !info.Level ? "Total: " : "";
            var priceSum = 0;
            awef.loop(info.Items, function (el) { priceSum += el.Price; });

            return {
                Person: total,
                Food: " count = " + info.Items.length,
                Price: priceSum
            };
        }

        function makeHeader(gr) {
            var name = utils.getColVal(gr.Column, gr.Items[0]);
            return { Content: name + ' Count = ' + gr.Items.length };
        }

        return utils.gridModelBuilder(
            {
                gp: gp,
                items: lunches,
                key: "Id",
                makeFooter: makeFooter,
                makeHeader: makeHeader
            });
    }
</script>
@*end5*@
<div class="tabs code">
    <div data-caption="view">@Html.Source("GridClientDataDemo/Index.cshtml", 5)</div>
</div>