@{
    ViewBag.Title = "Grid Client Side API";
}
<h1>Grid client side API</h1>
<div class="awe-il">
    <textarea id="vs" cols="70" rows="7">
$('#ApiDemoGrid').data('api').load(
{
    group: ['Food', 'Location'],
    sort: [{ Prop: "Date", Sort: 2}],
    params:{}
});
// Sort 0 = none, 1 = asc, 2 = desc
    </textarea><br />
    <button type="button" id="bApi" class="awe-btn">Execute</button>
</div>

<ul id="samples" class="samples awe-il">
    <li>
        <button type="button" class="awe-btn">Refresh grid</button>
        <div class="hidden">$('#ApiDemoGrid').data('api').load();</div>
    </li>
    <li>
        <button type="button" class="awe-btn">Where Food contains Pie; Sort by Price</button>
        <div class="hidden">
$('#ApiDemoGrid').data('api').load({
group:[],
sort: [{ Prop: "Price", Sort: 1}],
params: { Food: 'pie' }
});
// Sort 0 = none, 1 = asc, 2 = desc
        </div>
    </li>
    <li>
        <button type="button" class="awe-btn">Group by Food, Location; Sort by Date Desc</button>
        <div class="hidden">
$('#ApiDemoGrid').data('api').load({
group: ['Food', 'Location'],
sort: [{ Prop: "Date", Sort: 2}],
params:{}
});
// Sort 0 = none, 1 = asc, 2 = desc
        </div>
    </li>
    <li>
        <button type="button" class="awe-btn">Sort Person Desc Price Asc</button>
        <div class="hidden">
$('#ApiDemoGrid').data('api').load({
group:[],
sort: [{ Prop: "Person", Sort: 2}, { Prop: "Price", Sort: 1}],
params:{}
});
        </div>
    </li>
    <li>
        <button type="button" class="awe-btn">go to page 3</button>
        <div class="hidden">
$('#ApiDemoGrid').data('api').load({ oparams:{ page: 3 } });
// oparams - one time params, sent only for this call,
// params will persist until api with params: {} is called
        </div>
    </li>
    <li>
        <button type="button" class="awe-btn">Reset grid</button>
        <div class="hidden">
$('#ApiDemoGrid').data('api').reset({ params:{} });
// reset will bring the grid back to the initial state defined in the markup
// setting empty params, in case they were set before
        </div>
    </li>
</ul>
<br />
<br />
<script type="text/javascript">
    $(function () {
        $('#bApi').click(function () {
            eval($('#vs').val());
        });

        $('#samples .awe-btn').click(function () {
            $('#vs').val($(this).next().html());
            $('#bApi').click();
        });
        var grid = $('#ApiDemoGrid');

        grid.on('aweload awebeginload awerender', function (e, data, rd) {
            if ($(e.target).is(grid)) {
                $('#log').prepend(e.type + ' grid event at ' + site.getFormattedTime() + ' \n');
            }
        });
    });

    function setContent(o) {
        $('#ApiDemoGrid').data('api').clearpersist();
        $('#demoContent').html(o);
    }
</script>

<div id="demoContent">
    @*begin*@
    @(Html.Awe().Grid("ApiDemoGrid")
          .Mod(o => o.PageInfo().PageSize())
          .Columns(
              new Column { Bind = "Id", Width = 55 },
              new Column { Bind = "Person" },
              new Column { Bind = "Food" },
              new Column { Bind = "Price", Width = 100 },
              new Column { Bind = "Date", Width = 130 },
              new Column { Bind = "Location" })
          .Height(350)
          .Url(Url.Action("GetItems", "LunchGrid")))
    @*end*@
</div>
<br />
<div class="tabs">
    <div data-caption="description" class="expl">
        <p>
            Client side api is called by doing <code>$('#gridId').data('api') </code>and an api method
        </p>
        <ul>
            <li><code>.reset()</code> - will bring the grid back to the initial state defined in the markup</li>
            <li>
                <code>.load({group, sort, params})</code> - loads the grid with the specified grouping rules, sorting and additional parameters,
                if a property is omitted than the grid won't change it's state for that property;
                for example calling <code>.load({group: ['Food', 'Location']})</code> will change the grouping but won't affect the current sorting rules
            </li>
            <li><code>.clearpersist()</code> - clears the persistence data</li>
        </ul>
    </div>
    <div data-caption="view">@Html.Source("GridDemo/ClientSideApi.cshtml")</div>
    <div data-caption="controller">@Html.Code("Awesome/Grid/LunchGridController.cs")</div>
</div>
<h2>Events</h2>
<textarea id="log" rows="7" style="width: 100%"></textarea>