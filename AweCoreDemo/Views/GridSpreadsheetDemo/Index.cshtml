@{
    ViewBag.Title = "Grid Spreadsheet Demo";
}

<h1>Grid Spreadsheet Demo</h1>
The grid is used as an excel/google docs spreadsheet. ClientFormatFunc is set for each column to render a textbox for each cell, and some css to hide the borders of the textbox and make the cell look like one.
    Once the js change event is triggered on the textbox an ajax request is sent to the server to save the value. The Id is not shown and is not editable, but it's used to identify the records when editing them.
<br />
<br />
Try and edit some cells, after switch pages/refresh browser. Note you have to exit the cell or hit enter in order for the change to be persisted.
<br />
<h2>Simple spreadsheet grid</h2>
<div class="bar">
    <button type="button" class="awe-btn" id="addrow">add row</button>
</div>

@*begin*@
@(Html.Awe().Grid("Spreadsheet")
    .Groupable(false)
    .Sortable(false)
    .Url(Url.Action("GridGetItems"))
    .CssClass("spreadsh")
    .Columns(
        new Column { Bind = "Name", ClientFormatFunc = "txt" },
        new Column { Bind = "Location", ClientFormatFunc = "txt" },
        new Column { Bind = "Meal", ClientFormatFunc = "txt" }))
<textarea id="log" class="log"></textarea>
<script>
    function txt(model, name) {
        var val = model[name];
        if (!val) val = ""; // replace null with ""
        return "<input type='text' name='" + name + "' value='" + utils.escapeChars(val) + "'/>";
    }

    $(function () {
        var g = $('#Spreadsheet');
        var api = g.data('api');
        function add() {
            var xhr = api.load({ oparams: { page: 1 } }); // first go to page 1

            $.when(xhr).done(function () {
                var row = $(api.renderRow({ Id: 0 }));
                g.find('.awe-row:first').before(row); // insert the row
                row.find('input:first').focus();
            });
        }

        g.on('change', 'input', function () {
            var input = $(this);
            var model = utils.model(input.closest('.awe-row'));
            var prop = input.attr("name");
            model[prop] = input.val();

            // using awe.ajx instead of $.ajax to get the antiforgery token added automatically + error handling
            awe.ajx('@(Url.Action("Save"))', awe.srl({ id: model.Id, name: prop, value: model[prop] }))
                .done(function(res) {
                    if (model.Id == 0) {
                        model.Id = res.Id;
                        $('#log').prepend('new record added id = ' + res.Id + ' \n');
                    }

                    $('#log').prepend(model[prop] + ' saved \n');
                });
        });

        $('#addrow').on('click', add);
    });
</script>

<style>
    .spreadsh .awe-row td {
        background: white;
        padding: 0;
        text-align: center;
    }

    .spreadsh input[type="text"] {
        width: 100%;
        margin: auto;
        border: none;
        padding: .5em .7em;
    }
</style>
@*end*@
<br />
<div class="tabs code">
    <div data-caption="view">@Html.Source("GridSpreadsheetDemo/Index.cshtml")</div>
    <div data-caption="controller">@Html.Csource("Demos/Grid/GridSpreadsheetDemoController.cs")</div>
</div>
<br />
<br />
<h2>Add columns and bound to array</h2>
@*begin2*@
<div class="bar">
    <button type="button" class="awe-btn" id="btnArrAddRow">add row</button>
    <button type="button" class="awe-btn" onclick="awe.oc('addCol')">add column</button>
</div>
@{
    var gridId = "SpreadArrGrid";
}
@(Html.Awe().Grid(gridId)
      .Mod(o => o.ColumnsSelector())
      .Url(Url.Action("MultiColGrid"))
      .CssClass("spreadsh")
      .SendColumns(true))

@Html.Awe().InitCall("addCol").Url(Url.Action("AddColumn")).Success("utils.refreshGrid('" + gridId + "')")

<script>
    function txtVal(i) {
        return function (model, name) {
            var val = model.Values[i];
            if (!val) val = ""; //replace null with ""
            return "<input type='text' name='" + name + "' value='" + utils.escapeChars(val) + "'/>";
        };
    }

    $(function () {
        var g = $('#@(gridId)');

        $('#btnArrAddRow').click(function () {
            var row = $(g.data('api').renderRow({ Id: 0, Values: [] }));
            g.find('.awe-row:last').after(row); // insert the row
            g.data('o').lrso = 1; // flag last result not matching the rendered rows
            row.find('input:first').focus();
        });

        g.find('.awe-content').on('change', 'input', function () {
            var model = utils.model($(this).closest('.awe-row'));
            var col = parseInt($(this).attr("name"));
            var val = $(this).val();
            model.Values[col] = val;
            
            awe.ajx('@(Url.Action("SaveArr"))', awe.srl({ id: model.Id, col: col, value: val }))
                .done(function (res) {
                    if (!model.Values[0]) {
                        model.Id = res.Id;
                        $('#log').prepend('new record added id = ' + res.Id + ' \n');
                    }

                    $('#log').prepend(val + ' saved \n');
                });
        });
    });
</script>
@*end2*@

<div class="tabs code">
    <div data-caption="view">@Html.Source("GridSpreadsheetDemo/Index.cshtml", 2)</div>
    <div data-caption="controller">@Html.Csource("Demos/Grid/GridSpreadsheetDemoController.cs", 2)</div>
</div>
<br />
<br />
<a href="@Url.Action("Autocomplete")">Autocomplete Cells Spreadsheet Demo</a>