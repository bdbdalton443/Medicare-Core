#pragma checksum "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "411db5b889ca9c514501626fce90a9c67a61a550"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_GridDemo_CustomFormat), @"mvc.1.0.view", @"/Views/GridDemo/CustomFormat.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using Omu.AwesomeMvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using Omu.Awem.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Helpers.Awesome;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Helpers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"411db5b889ca9c514501626fce90a9c67a61a550", @"/Views/GridDemo/CustomFormat.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4be622e01f8f56f0dd36faab0a36e6216511e344", @"/Views/_ViewImports.cshtml")]
    public class Views_GridDemo_CustomFormat : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
  
    ViewBag.Title = "Grid Custom Formatting";

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1>Grid Custom Formatting</h1>\r\n");
#nullable restore
#line 6 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
  
    var btnFormat = Html.Awe().Button()
            .Text("details")
            .CssClass("o-pad")
            .OnClick(Html.Awe().OpenPopup("details")
            .Params(new { id = ".(Id)" }))
            .ToString();

    var linkFormat = "<a href='" + Url.Action("OpenDetails", "GridDemo", new { id = ".(Id)" }) + "'>open</a>";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 17 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
Write(Html.Awe().Grid("CustomFormatGrid")
        .Url(Url.Action("CustomFormatGrid", "GridDemo"))
        .Mod(o => o.ColumnsSelector())
        .Persistence(Persistence.Session)
        .Height(350)
        .RowClassClientFormat(".(RowClass)")
        .Columns(
        new Column { Bind = "Person", ClientFormat = ".(Person) was at .(Location)", HeaderCssClass = "boldh" },
        new Column { Bind = "Food", ClientFormat = ".(Food)", CssClass = "bluev" },
        new Column { Bind = "Price", ClientFormatFunc = "formatPrice", Width = 100 },
        new Column { Bind = "Organic", ClientFormatFunc = "toggle", Width = 90 },
        new Column { Bind = "Date", CssClass = "bgdate" },
        new Column { ClientFormatFunc = "useTemplate('template1')" },
        new Column { ClientFormat = linkFormat, Width = 90, CssClass = "center" },
        new Column { ClientFormat = btnFormat, Width = 90 }));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 33 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
Write(Html.Awe().InitPopup().Name("details").Url(Url.Action("Details", "GridDemo")).Mod(o => o.Dropdown()).Modal());

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 35 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
  
    var orgFormat = Html.Awe().CheckBox("org")
                .Prefix(".(Id)")
                .Otoggl(cssClass: ".(Chked)")
                .Svalue(".(Organic)")
                .Enabled(false)
                .ToString();

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<script type=\"text/javascript\">\r\n    function toggle(lunch) {\r\n        var str = ");
#nullable restore
#line 46 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
             Write(Html.Raw(DemoUtils.Encode(orgFormat)));

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
        var chkd = lunch.Organic ? 'o-chked' : '';

        str = str.split('.(Id)').join(lunch.Id).split('.(Organic)').join(lunch.Organic).split('.(Chked)').join(chkd);
        return str;
    }

    function formatPrice(lunch, prop) {
        var color = 'navy';
        var price = lunch[prop];
        if (price < 20) color = 'green';
        if (price > 50) color = 'red';
        return ""<div style='color:"" + color + "";text-width:bold;'>"" + price + "" &pound; </div>"";
    }

    function useTemplate(id) {
        return function (model) {
            var str = $('#' + id).html();
            for (var name in model) {
                var val = model[name];
                if (val == null) val = '';
                str = str.replace("".("" + name + "")"", val);
            }
            return str;
        };
    }
</script>
<style>
    .date1 .bgdate {
        background: #efd2e8;
    }

    .boldh .awe-col, .boldh {
        color: navy;
    }

    .bluev {
        color: b");
            WriteLiteral(@"lueviolet;
    }

    .pinkb {
        background: pink !important;
        color: black;
    }

    .greenb {
        background: #f0f9f7 !important;
        color: black;
    }

    .awe-grid .pinkb a, .awe-grid .greenb a {
        color: blue;
    }
</style>
<div id=""template1"" style=""display: none"">
    .(Person) spent .(Price) &pound;
</div>
");
            WriteLiteral("<br />\r\n\r\n");
#nullable restore
#line 106 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridDemo\CustomFormat.cshtml"
Write(Html.Awe().Tabs().Add("description",
    item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    WriteLiteral(@"Cell values can be evaluated on the client side using templates and js functions or on the server side using Map and setting a custom value (as shown here for the Date column).
        The group header value can also be set on the server side, same applies for the footer.<br />
        <br />
        <ul>
            <li>
                <code>Column.ClientFormat</code> - Client format for the column defined as a string using <code>.(ModelPropertyName)</code> for including values of the row model.
            </li>
            <li>
                <code>Column.ClientFormatFunc</code> - Defines the Name of a javascript function that will receive as a parameter the model (or mapped model) of the grid row and must return a string
                which will be used a value for the cell. The result of the javascript function will not be encoded.
            </li>
            <li>
                <code>RowClassClientFormat</code> - used to set a css class to grid rows
            </li>
        </ul>");
    PopWriter();
}
), "expl")
          .Add("view", Html.Source("GridDemo/CustomFormat.cshtml"))
          .Add("controller", Html.Csource("Demos/Grid/GridDemoController.cs", "format"))
          .Add("popup view", Html.Source("GridDemo/Details.cshtml"))
          .Add("open view", Html.Source("GridDemo/OpenDetails.cshtml")));

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
