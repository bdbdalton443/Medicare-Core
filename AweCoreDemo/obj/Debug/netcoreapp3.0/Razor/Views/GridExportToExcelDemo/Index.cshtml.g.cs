#pragma checksum "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ca0ad3199a56f4f7861da4a824fee4b5e543ff9e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_GridExportToExcelDemo_Index), @"mvc.1.0.view", @"/Views/GridExportToExcelDemo/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using Omu.AwesomeMvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using Omu.Awem.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Helpers.Awesome;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Helpers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ca0ad3199a56f4f7861da4a824fee4b5e543ff9e", @"/Views/GridExportToExcelDemo/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4be622e01f8f56f0dd36faab0a36e6216511e344", @"/Views/_ViewImports.cshtml")]
    public class Views_GridExportToExcelDemo_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
  
    ViewBag.Title = "Export grid to Excel, Pdf and txt (csv) using NPOI, iText";

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1>Export grid to excel, pdf, txt (csv) demo</h1>\r\n<div class=\"expl\">\r\n    This demo is showing how to build the grid model and use it to export the data in various formats (xls, pdf, txt) using external libraries and custom code.\r\n</div>\r\n<br />\r\n");
#nullable restore
#line 10 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
  
    var grid = "LunchGrid";

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
Write(Html.Awe().Grid(grid)
        .Url(Url.Action("GetItems"))
        .Mod(o => o.ColumnsSelector())
        .Persistence(Persistence.Session)
        .Resizable()
        .Height(350)
        .Columns(
        new Column { Bind = "Id", Width = 80 },
        new Column { Bind = "Person" },
        new Column { Bind = "Food" },
        new Column { Bind = "Date", Width = 150 },
        new Column { Bind = "Price", ClientFormatFunc = "priceFormat", Width = 110 },
        new Column { Bind = "Country.Name", ClientFormat = ".(CountryName)", Header = "Country" },
        new Column { Bind = "Chef.FirstName,Chef.LastName", ClientFormat = ".(ChefName)", Header = "Chef" },
        new Column { Bind = "Location" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<br />
<div class=""bar"">
    <button id=""exportGrid"" type=""button"" class=""awe-btn"">Export grid to excel</button>
    <button id=""exportGridPdf"" type=""button"" class=""awe-btn"">Export grid to Pdf</button>
    <button id=""exportGridTxt"" type=""button"" class=""awe-btn"">Export grid to txt (csv)</button>
    <div style=""padding: 0 1em; display: inline-block;"">
        <label>");
#nullable restore
#line 35 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
          Write(Html.Awe().CheckBox("allPages"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@" All pages</label>
    </div>

    <br />
    <br />
    <button id=""exportAll"" type=""button"" class=""awe-btn"">Export all records to excel</button>
</div>
<script>
    $(function() {
        $('#exportAll').click(function() {
            getFile('");
#nullable restore
#line 45 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                Write(Url.Action("ExportAllToExcel", "GridExportToExcelDemo"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n        });\r\n\r\n        $(\'#exportGrid\').click(function() {\r\n            getFile(\'");
#nullable restore
#line 49 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                Write(Url.Action("ExportGridToExcel", "GridExportToExcelDemo"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n        });\r\n\r\n        $(\'#exportGridPdf\').click(function() {\r\n            getFile(\'");
#nullable restore
#line 53 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                Write(Url.Action("ExportGridToPdf", "GridExportToExcelDemo"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n        });\r\n\r\n        $(\'#exportGridTxt\').click(function() {\r\n            getFile(\'");
#nullable restore
#line 57 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                Write(Url.Action("ExportGridToTxt", "GridExportToExcelDemo"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n        });\r\n\r\n        function getFile(url) {\r\n            var $form = $(\'<form method=\"post\"/>\').attr(\'action\', url).appendTo(\'body\');\r\n\r\n            var grid = $(\'#");
#nullable restore
#line 63 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                       Write(grid);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');

            // request parameters (sorting, grouping, any parent parameters)
            var req = grid.data('api').getRequest();

            // send visible columns info, binds to GridExpParams
            var viscols = utils.getVisCols(grid);
            awef.loop(viscols,
                function(v) {
                    $form.append(""<input type='hidden' name='visNames' value='"" + v + ""'/>"");
                });

            awef.loop(req,
                function(val) {
                    $form.append(""<input type='hidden' name='"" + val.name + ""' value='"" + val.value + ""'/>"");
                });

            $form.append($('#allPages').clone());
            $form.submit();
            $form.remove();
        }
    });

    function priceFormat(lunch, prop) {
        var price = lunch[prop];
        return price + ' USD';
    }
</script>
");
            WriteLiteral(@"<br />
<br />
<div class=""tabs"">
    <div data-caption=""description"" class=""expl"">
        Export the content of a grid to excel, pdf and txt file (csv).
        To create an excel file we're using the <a href=""https://github.com/tonyqus/npoi"">NPOI library</a>.<br />
        For exporting to Pdf the <a href=""https://itextpdf.com/"">iText7</a> library is used.<br />
        To get the entire source code you can download this demo.
    </div>
    <div data-caption=""view"">");
#nullable restore
#line 101 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                        Write(Html.Source("GridExportToExcelDemo/Index.cshtml"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n    <div data-caption=\"controller\">");
#nullable restore
#line 102 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridExportToExcelDemo\Index.cshtml"
                              Write(Html.Code("Demos/Grid/GridExportToExcelDemoController.cs"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
