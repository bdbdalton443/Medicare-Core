#pragma checksum "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cbbe13a5a606b39dfc247cfec820abb438001de8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_GridChooseColumnsDemo_Index), @"mvc.1.0.view", @"/Views/GridChooseColumnsDemo/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using Omu.AwesomeMvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using Omu.Awem.Helpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Utils;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Helpers.Awesome;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\_ViewImports.cshtml"
using AweCoreDemo.Helpers;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cbbe13a5a606b39dfc247cfec820abb438001de8", @"/Views/GridChooseColumnsDemo/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4be622e01f8f56f0dd36faab0a36e6216511e344", @"/Views/_ViewImports.cshtml")]
    public class Views_GridChooseColumnsDemo_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml"
  
    ViewBag.Title = "Grid Choose columns demo";

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1>Grid choose columns demo</h1>\r\n<p>\r\n    For hiding/showing columns see ");
#nullable restore
#line 7 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml"
                              Write(Html.ActionLink("grid hide columns demo", "Index", "GridShowHideColumnsApiDemo"));

#line default
#line hidden
#nullable disable
            WriteLiteral("; \r\n    this demo shows how columns can be set/modified at the server side,<br/> \r\n    feature that is also used in the scheduler demo and array datasource demo.\r\n</p>\r\n");
#nullable restore
#line 11 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml"
Write(Html.Awe().Grid("GridChooseColumns")
                .Height(350)
                .Url(Url.Action("GetItems"))
                .Persistence(Persistence.Session)
                .ColumnsPersistence(Persistence.Session)
                .ShowGroupBar(true)
                .SendColumns(true));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<h3>using api</h3>
<textarea id=""vs"" style=""width: 100%;"">
$('#GridChooseColumns').data('api').load({ oparams:{ selectedColumns:[""Id"",""Person"", ""Location"", ""Date"" ], choosingColumns:true } });
// all columns = ""Id"", ""Person"", ""Food"", ""Location"", ""Date"", ""Price""
// Id and Person will be displayed regardless
    </textarea>

<button type=""button"" class=""awe-btn"" id=""btnExecute"">Execute</button>

<script>
    $(function () {
        $('#btnExecute').click(function () {
            eval($('#vs').val());
        });
    });
</script>

<h3>using checkboxlist</h3>
");
#nullable restore
#line 37 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml"
Write(Html.Awe().AjaxCheckboxList("chkColumns").Url(Url.Action("GetColumnsItems")).Load(false));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<button type=""button"" class=""awe-btn"" id=""btnUpdateColumns"">Update columns</button>
<script>
    $(function () {
        $('#GridChooseColumns').on('aweload', function (e, res) {
            $('#chkColumns').val(JSON.stringify(res.tg.selectedColumns)).data('api').load({ params: res.tg });
        });

        $('#btnUpdateColumns').click(function () {
            var val = $('#chkColumns').val();
            if (!val) val = ""[]"";
            $('#GridChooseColumns').data('api').load({ oparams: { selectedColumns: JSON.parse(val), choosingColumns: true } });
        });
    });
</script>
");
            WriteLiteral(@"<p>
    note: using persistence Session, try removing some columns, group by a column, and refresh, to mantain the same columns even after reopening browser change to Persistence.Local
</p>
<div class=""tabs"">
    <div class=""expl"" data-caption=""description"">
        Showing how the grid columns can be set/modified in the controller.
        <br />
        The grid has .SendColumns(true) which will send the columns state information on each request, on the first request g.Columns.Length is 0, this is where we set the default column definition. 
    Columns are picked by sending additional parameters using oparams (one time parameters), 
    and by modifying/setting the g.Columns (when g.Columns has Columns in it, the grid will use it instead of what it's specified in the markup). 
    The gridModel.tg is populated with data to be used by the AjaxCheckboxList, on grid aweload event the api of the AjaxCheckboxList is called.
    Persistence will save the state of the grid ( page, collapsed groups, col");
            WriteLiteral("umns )\r\n    </div>\r\n    <div data-caption=\"view\">");
#nullable restore
#line 66 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml"
                        Write(Html.Source("GridChooseColumnsDemo/Index.cshtml"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n    <div data-caption=\"controller\">");
#nullable restore
#line 67 "D:\Tutorials\ASP Core Tables\AweCoreDemo\AweCoreDemo\AweCoreDemo\Views\GridChooseColumnsDemo\Index.cshtml"
                              Write(Html.Csource("Demos/Grid/GridChooseColumnsDemoController.cs"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n</div>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
